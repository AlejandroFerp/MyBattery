package com.batteryworkshop.models;

import jakarta.persistence.*;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * @brief Battery entity registered in the workshop system.
 * @details This entity stores the basic battery information and its associated repair reports.
 * The battery has a predefined model, description and base repair cost.
 * @since 1.0
 */
@Entity
public class Battery {

    /**
     * @brief Unique identifier of the battery.
     * @details Automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private final Long id;

    /**
     * @brief Model or type of battery.
     * @details Represents the technical reference or internal model code.
     * This field cannot be null.
     */
    @Column(nullable = false)
    private final String model;

    /**
     * @brief Detailed description of the battery model.
     * @details Can include technical specifications or additional notes.
     */
    private final String description;

    /**
     * @brief Base repair cost determined by the battery model.
     * @details BigDecimal is used to ensure precision in monetary calculations.
     * This field cannot be null and has a precision of 10 digits with 2 decimals.
     */
    @Column(nullable = false, precision = 10, scale = 2)
    private final BigDecimal baseCost;

    /**
     * @brief List of repair reports associated with this battery.
     * @details The relationship is bidirectional and reports are deleted in cascade if the battery is deleted.
     */
    @OneToMany(mappedBy = "battery", cascade = CascadeType.ALL)
    private final List<RepairReport> repairReports = new ArrayList<>();

    /**
     * @brief Protected no-args constructor required by JPA.
     * @details Should not be used directly in application code.
     */
    protected Battery() {
        this.id = null;
        this.model = null;
        this.description = null;
        this.baseCost = null;
    }

    /**
     * @param model       The battery model or type (cannot be null)
     * @param description The detailed battery description (can be null)
     * @param baseCost    The base repair cost (cannot be null)
     * @throws IllegalArgumentException if model or baseCost are null
     * @brief Creates a new Battery instance with required basic data.
     */
    public Battery(String model, String description, BigDecimal baseCost) {
        if (model == null || baseCost == null) {
            throw new IllegalArgumentException("Model and baseCost cannot be null");
        }
        this.id = null;
        this.model = model;
        this.description = description;
        this.baseCost = baseCost;
    }

    /**
     * @return The battery ID
     * @brief Gets the unique identifier of the battery.
     */
    public Long getId() {
        return id;
    }

    /**
     * @return The battery model
     * @brief Gets the battery model.
     */
    public String getModel() {
        return model;
    }

    /**
     * @return The battery description, can be null
     * @brief Gets the battery description.
     */
    public String getDescription() {
        return description;
    }

    /**
     * @return The base repair cost
     * @brief Gets the base repair cost of the battery.
     */
    public BigDecimal getBaseCost() {
        return this.baseCost;
    }

    /**
     * @return Immutable list of repair reports
     * @brief Gets an immutable list of repair reports associated with this battery.
     * @details The returned list cannot be modified to maintain encapsulation.
     */
    public List<RepairReport> getRepairReports() {
        return Collections.unmodifiableList(repairReports);
    }

    /**
     * @return The newly created and added repair report
     * @brief Creates and adds a new repair report to the battery.
     * @details Maintains bidirectional consistency of the relationship between Battery and RepairReport.
     */
    public RepairReport addRepairReport() {
        RepairReport report = new RepairReport(this);
        repairReports.add(report);
        return report;
    }
}